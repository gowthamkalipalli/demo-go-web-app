pipeline {
    agent {
        docker {
            image 'gowthamk4/gowtham-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                //checkout scm
                //Git(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/gowthamkalipalli/demo-go-web-app']])
            }
        }
        stage('Build') {
            steps {
                sh 'go build -o myapp'
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://65.2.37.38:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'go mod tidy'
            }
        }
        
        stage('OWASP File Scan') {
            steps {
                script {
                    sh 'curl -X POST "${OWASP_DEPLOYMENT_URL}/scan" -F "file=@your-file.zip"'
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                script {
                    docker.image(TRIVY_IMAGE).inside {
                        sh 'trivy fs --no-progress .'
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                script {
                    docker.build("gowthamk4/go-app:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        sh 'docker push gowthamk4/go-app:${env.BUILD_ID}'
                    }
                }
            }
        }
        
        stage('Trivy Scan for Docker Image') {
            steps {
                script {
                    docker.image(TRIVY_IMAGE).inside {
                        sh 'trivy image --no-progress gowthamk4/go-app:${env.BUILD_ID}'
                    }
                }
            }
        }
        
        stage('Deploy to Container') {
            steps {
                script {
                    sh 'docker run -d --name gowtham  -p 8080:8080 gowthamk4/go-app:v1'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
