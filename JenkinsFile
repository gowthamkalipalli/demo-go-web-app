pipeline {
    agent {
        docker {
            image 'gowthamk4/go-app:latest'
            label 'docker-slave'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONARQUBE_URL = 'http://sonarqube.example.com'
        SONARQUBE_TOKEN = credentials('sonarqube-token-id')
        DOCKER_REGISTRY = 'your-docker-registry'
        DOCKER_CREDENTIALS_ID = credentials('docker-credentials-id')
        OWASP_DEPLOYMENT_URL = 'http://owasp-scanner.example.com'
        TRIVY_IMAGE = 'aquasec/trivy:latest'
        CONTAINER_NAME = 'your-container'
    }

    stages {
        stage('Checkout') {
            steps {
                // Check out the source code into the workspace
                checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    // Ensure this runs inside a node block
                    sh 'go build -o myapp'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                script {
                    // Ensure this runs inside a node block
                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh 'sonar-scanner -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Ensure this runs inside a node block
                    sh 'go mod tidy'
                }
            }
        }

        stage('OWASP File Scan') {
            steps {
                script {
                    // Ensure this runs inside a node block
                    def filePath = 'path/to/your-file.zip'
                    def scanUrl = "${OWASP_DEPLOYMENT_URL}/scan"
                    sh "curl -X POST '${scanUrl}' -F 'file=@${filePath}'"
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    docker.image(TRIVY_IMAGE).inside {
                        sh 'trivy fs --no-progress .'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    docker.build("gowthamk4/go-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        sh 'docker push gowthamk4/go-app:${env.BUILD_ID}'
                    }
                }
            }
        }

        stage('Trivy Scan for Docker Image') {
            steps {
                script {
                    docker.image(TRIVY_IMAGE).inside {
                        sh 'trivy image --no-progress gowthamk4/go-app:${env.BUILD_ID}'
                    }
                }
            }
        }

        stage('Deploy to Container') {
            steps {
                script {
                    // Ensure this runs inside a node block
                    sh 'kubectl set image deployment/${CONTAINER_NAME} ${CONTAINER_NAME}=your-docker-registry/your-image-name:${env.BUILD_ID}'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
